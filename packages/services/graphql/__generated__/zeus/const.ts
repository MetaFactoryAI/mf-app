/* eslint-disable */

export const AllTypesProps: Record<string, any> = {
  Int_comparison_exp: {},
  String_comparison_exp: {},
  contribution_votes_aggregate_bool_exp: {
    count: 'contribution_votes_aggregate_bool_exp_count',
  },
  contribution_votes_aggregate_bool_exp_count: {
    arguments: 'contribution_votes_select_column',
    filter: 'contribution_votes_bool_exp',
    predicate: 'Int_comparison_exp',
  },
  contribution_votes_aggregate_fields: {
    count: {
      columns: 'contribution_votes_select_column',
    },
  },
  contribution_votes_aggregate_order_by: {
    count: 'order_by',
    max: 'contribution_votes_max_order_by',
    min: 'contribution_votes_min_order_by',
  },
  contribution_votes_arr_rel_insert_input: {
    data: 'contribution_votes_insert_input',
    on_conflict: 'contribution_votes_on_conflict',
  },
  contribution_votes_bool_exp: {
    _and: 'contribution_votes_bool_exp',
    _not: 'contribution_votes_bool_exp',
    _or: 'contribution_votes_bool_exp',
    contribution: 'contributions_bool_exp',
    contribution_id: 'uuid_comparison_exp',
    rating: 'String_comparison_exp',
    user: 'users_bool_exp',
    user_id: 'uuid_comparison_exp',
  },
  contribution_votes_constraint: 'enum' as const,
  contribution_votes_insert_input: {
    contribution: 'contributions_obj_rel_insert_input',
    contribution_id: 'uuid',
    user: 'users_obj_rel_insert_input',
    user_id: 'uuid',
  },
  contribution_votes_max_order_by: {
    contribution_id: 'order_by',
    rating: 'order_by',
    user_id: 'order_by',
  },
  contribution_votes_min_order_by: {
    contribution_id: 'order_by',
    rating: 'order_by',
    user_id: 'order_by',
  },
  contribution_votes_on_conflict: {
    constraint: 'contribution_votes_constraint',
    update_columns: 'contribution_votes_update_column',
    where: 'contribution_votes_bool_exp',
  },
  contribution_votes_order_by: {
    contribution: 'contributions_order_by',
    contribution_id: 'order_by',
    rating: 'order_by',
    user: 'users_order_by',
    user_id: 'order_by',
  },
  contribution_votes_pk_columns_input: {
    contribution_id: 'uuid',
    user_id: 'uuid',
  },
  contribution_votes_select_column: 'enum' as const,
  contribution_votes_set_input: {
    contribution_id: 'uuid',
    user_id: 'uuid',
  },
  contribution_votes_stream_cursor_input: {
    initial_value: 'contribution_votes_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  contribution_votes_stream_cursor_value_input: {
    contribution_id: 'uuid',
    user_id: 'uuid',
  },
  contribution_votes_update_column: 'enum' as const,
  contribution_votes_updates: {
    _set: 'contribution_votes_set_input',
    where: 'contribution_votes_bool_exp',
  },
  contributions: {
    contributors: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    contributors_aggregate: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    votes: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
    votes_aggregate: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
  },
  contributions_aggregate_fields: {
    count: {
      columns: 'contributions_select_column',
    },
  },
  contributions_bool_exp: {
    _and: 'contributions_bool_exp',
    _not: 'contributions_bool_exp',
    _or: 'contributions_bool_exp',
    artifact: 'String_comparison_exp',
    author: 'users_bool_exp',
    category: 'String_comparison_exp',
    contributors: 'contributors_bool_exp',
    contributors_aggregate: 'contributors_aggregate_bool_exp',
    created_at: 'timestamptz_comparison_exp',
    created_by: 'uuid_comparison_exp',
    date: 'date_comparison_exp',
    description: 'String_comparison_exp',
    effort: 'String_comparison_exp',
    id: 'uuid_comparison_exp',
    impact: 'String_comparison_exp',
    title: 'String_comparison_exp',
    votes: 'contribution_votes_bool_exp',
    votes_aggregate: 'contribution_votes_aggregate_bool_exp',
    weight: 'Int_comparison_exp',
  },
  contributions_constraint: 'enum' as const,
  contributions_inc_input: {},
  contributions_insert_input: {
    author: 'users_obj_rel_insert_input',
    contributors: 'contributors_arr_rel_insert_input',
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    id: 'uuid',
    votes: 'contribution_votes_arr_rel_insert_input',
  },
  contributions_obj_rel_insert_input: {
    data: 'contributions_insert_input',
    on_conflict: 'contributions_on_conflict',
  },
  contributions_on_conflict: {
    constraint: 'contributions_constraint',
    update_columns: 'contributions_update_column',
    where: 'contributions_bool_exp',
  },
  contributions_order_by: {
    artifact: 'order_by',
    author: 'users_order_by',
    category: 'order_by',
    contributors_aggregate: 'contributors_aggregate_order_by',
    created_at: 'order_by',
    created_by: 'order_by',
    date: 'order_by',
    description: 'order_by',
    effort: 'order_by',
    id: 'order_by',
    impact: 'order_by',
    title: 'order_by',
    votes_aggregate: 'contribution_votes_aggregate_order_by',
    weight: 'order_by',
  },
  contributions_pk_columns_input: {
    id: 'uuid',
  },
  contributions_select_column: 'enum' as const,
  contributions_set_input: {
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    id: 'uuid',
  },
  contributions_stream_cursor_input: {
    initial_value: 'contributions_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  contributions_stream_cursor_value_input: {
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    id: 'uuid',
  },
  contributions_update_column: 'enum' as const,
  contributions_updates: {
    _inc: 'contributions_inc_input',
    _set: 'contributions_set_input',
    where: 'contributions_bool_exp',
  },
  contributors_aggregate_bool_exp: {
    count: 'contributors_aggregate_bool_exp_count',
  },
  contributors_aggregate_bool_exp_count: {
    arguments: 'contributors_select_column',
    filter: 'contributors_bool_exp',
    predicate: 'Int_comparison_exp',
  },
  contributors_aggregate_fields: {
    count: {
      columns: 'contributors_select_column',
    },
  },
  contributors_aggregate_order_by: {
    avg: 'contributors_avg_order_by',
    count: 'order_by',
    max: 'contributors_max_order_by',
    min: 'contributors_min_order_by',
    stddev: 'contributors_stddev_order_by',
    stddev_pop: 'contributors_stddev_pop_order_by',
    stddev_samp: 'contributors_stddev_samp_order_by',
    sum: 'contributors_sum_order_by',
    var_pop: 'contributors_var_pop_order_by',
    var_samp: 'contributors_var_samp_order_by',
    variance: 'contributors_variance_order_by',
  },
  contributors_arr_rel_insert_input: {
    data: 'contributors_insert_input',
    on_conflict: 'contributors_on_conflict',
  },
  contributors_avg_order_by: {
    contribution_share: 'order_by',
  },
  contributors_bool_exp: {
    _and: 'contributors_bool_exp',
    _not: 'contributors_bool_exp',
    _or: 'contributors_bool_exp',
    contribution: 'contributions_bool_exp',
    contribution_id: 'uuid_comparison_exp',
    contribution_share: 'numeric_comparison_exp',
    user: 'users_bool_exp',
    user_id: 'uuid_comparison_exp',
  },
  contributors_constraint: 'enum' as const,
  contributors_inc_input: {
    contribution_share: 'numeric',
  },
  contributors_insert_input: {
    contribution: 'contributions_obj_rel_insert_input',
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user: 'users_obj_rel_insert_input',
    user_id: 'uuid',
  },
  contributors_max_order_by: {
    contribution_id: 'order_by',
    contribution_share: 'order_by',
    user_id: 'order_by',
  },
  contributors_min_order_by: {
    contribution_id: 'order_by',
    contribution_share: 'order_by',
    user_id: 'order_by',
  },
  contributors_on_conflict: {
    constraint: 'contributors_constraint',
    update_columns: 'contributors_update_column',
    where: 'contributors_bool_exp',
  },
  contributors_order_by: {
    contribution: 'contributions_order_by',
    contribution_id: 'order_by',
    contribution_share: 'order_by',
    user: 'users_order_by',
    user_id: 'order_by',
  },
  contributors_pk_columns_input: {
    contribution_id: 'uuid',
    user_id: 'uuid',
  },
  contributors_select_column: 'enum' as const,
  contributors_set_input: {
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user_id: 'uuid',
  },
  contributors_stddev_order_by: {
    contribution_share: 'order_by',
  },
  contributors_stddev_pop_order_by: {
    contribution_share: 'order_by',
  },
  contributors_stddev_samp_order_by: {
    contribution_share: 'order_by',
  },
  contributors_stream_cursor_input: {
    initial_value: 'contributors_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  contributors_stream_cursor_value_input: {
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user_id: 'uuid',
  },
  contributors_sum_order_by: {
    contribution_share: 'order_by',
  },
  contributors_update_column: 'enum' as const,
  contributors_updates: {
    _inc: 'contributors_inc_input',
    _set: 'contributors_set_input',
    where: 'contributors_bool_exp',
  },
  contributors_var_pop_order_by: {
    contribution_share: 'order_by',
  },
  contributors_var_samp_order_by: {
    contribution_share: 'order_by',
  },
  contributors_variance_order_by: {
    contribution_share: 'order_by',
  },
  cursor_ordering: 'enum' as const,
  date: `scalar.date` as const,
  date_comparison_exp: {
    _eq: 'date',
    _gt: 'date',
    _gte: 'date',
    _in: 'date',
    _lt: 'date',
    _lte: 'date',
    _neq: 'date',
    _nin: 'date',
  },
  jsonb: `scalar.jsonb` as const,
  jsonb_cast_exp: {
    String: 'String_comparison_exp',
  },
  jsonb_comparison_exp: {
    _cast: 'jsonb_cast_exp',
    _contained_in: 'jsonb',
    _contains: 'jsonb',
    _eq: 'jsonb',
    _gt: 'jsonb',
    _gte: 'jsonb',
    _in: 'jsonb',
    _lt: 'jsonb',
    _lte: 'jsonb',
    _neq: 'jsonb',
    _nin: 'jsonb',
  },
  mutation_root: {
    delete_contribution_votes: {
      where: 'contribution_votes_bool_exp',
    },
    delete_contribution_votes_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    delete_contributions: {
      where: 'contributions_bool_exp',
    },
    delete_contributions_by_pk: {
      id: 'uuid',
    },
    delete_contributors: {
      where: 'contributors_bool_exp',
    },
    delete_contributors_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    delete_robot_merkle_claims: {
      where: 'robot_merkle_claims_bool_exp',
    },
    delete_robot_merkle_claims_by_pk: {
      id: 'uuid',
    },
    delete_robot_merkle_roots: {
      where: 'robot_merkle_roots_bool_exp',
    },
    delete_robot_merkle_roots_by_pk: {},
    delete_robot_order: {
      where: 'robot_order_bool_exp',
    },
    delete_robot_order_by_pk: {},
    delete_robot_product: {
      where: 'robot_product_bool_exp',
    },
    delete_robot_product_by_pk: {},
    delete_robot_product_designer: {
      where: 'robot_product_designer_bool_exp',
    },
    delete_robot_product_designer_by_pk: {},
    delete_shop_api_users: {
      where: 'shop_api_users_bool_exp',
    },
    delete_shop_api_users_by_pk: {},
    delete_shop_product_locks: {
      where: 'shop_product_locks_bool_exp',
    },
    delete_shop_product_locks_by_pk: {},
    delete_users: {
      where: 'users_bool_exp',
    },
    delete_users_by_pk: {
      id: 'uuid',
    },
    insert_contribution_votes: {
      objects: 'contribution_votes_insert_input',
      on_conflict: 'contribution_votes_on_conflict',
    },
    insert_contribution_votes_one: {
      object: 'contribution_votes_insert_input',
      on_conflict: 'contribution_votes_on_conflict',
    },
    insert_contributions: {
      objects: 'contributions_insert_input',
      on_conflict: 'contributions_on_conflict',
    },
    insert_contributions_one: {
      object: 'contributions_insert_input',
      on_conflict: 'contributions_on_conflict',
    },
    insert_contributors: {
      objects: 'contributors_insert_input',
      on_conflict: 'contributors_on_conflict',
    },
    insert_contributors_one: {
      object: 'contributors_insert_input',
      on_conflict: 'contributors_on_conflict',
    },
    insert_robot_merkle_claims: {
      objects: 'robot_merkle_claims_insert_input',
      on_conflict: 'robot_merkle_claims_on_conflict',
    },
    insert_robot_merkle_claims_one: {
      object: 'robot_merkle_claims_insert_input',
      on_conflict: 'robot_merkle_claims_on_conflict',
    },
    insert_robot_merkle_roots: {
      objects: 'robot_merkle_roots_insert_input',
      on_conflict: 'robot_merkle_roots_on_conflict',
    },
    insert_robot_merkle_roots_one: {
      object: 'robot_merkle_roots_insert_input',
      on_conflict: 'robot_merkle_roots_on_conflict',
    },
    insert_robot_order: {
      objects: 'robot_order_insert_input',
      on_conflict: 'robot_order_on_conflict',
    },
    insert_robot_order_one: {
      object: 'robot_order_insert_input',
      on_conflict: 'robot_order_on_conflict',
    },
    insert_robot_product: {
      objects: 'robot_product_insert_input',
      on_conflict: 'robot_product_on_conflict',
    },
    insert_robot_product_designer: {
      objects: 'robot_product_designer_insert_input',
      on_conflict: 'robot_product_designer_on_conflict',
    },
    insert_robot_product_designer_one: {
      object: 'robot_product_designer_insert_input',
      on_conflict: 'robot_product_designer_on_conflict',
    },
    insert_robot_product_one: {
      object: 'robot_product_insert_input',
      on_conflict: 'robot_product_on_conflict',
    },
    insert_shop_api_users: {
      objects: 'shop_api_users_insert_input',
      on_conflict: 'shop_api_users_on_conflict',
    },
    insert_shop_api_users_one: {
      object: 'shop_api_users_insert_input',
      on_conflict: 'shop_api_users_on_conflict',
    },
    insert_shop_product_locks: {
      objects: 'shop_product_locks_insert_input',
      on_conflict: 'shop_product_locks_on_conflict',
    },
    insert_shop_product_locks_one: {
      object: 'shop_product_locks_insert_input',
      on_conflict: 'shop_product_locks_on_conflict',
    },
    insert_users: {
      objects: 'users_insert_input',
      on_conflict: 'users_on_conflict',
    },
    insert_users_one: {
      object: 'users_insert_input',
      on_conflict: 'users_on_conflict',
    },
    update_contribution_votes: {
      _set: 'contribution_votes_set_input',
      where: 'contribution_votes_bool_exp',
    },
    update_contribution_votes_by_pk: {
      _set: 'contribution_votes_set_input',
      pk_columns: 'contribution_votes_pk_columns_input',
    },
    update_contribution_votes_many: {
      updates: 'contribution_votes_updates',
    },
    update_contributions: {
      _inc: 'contributions_inc_input',
      _set: 'contributions_set_input',
      where: 'contributions_bool_exp',
    },
    update_contributions_by_pk: {
      _inc: 'contributions_inc_input',
      _set: 'contributions_set_input',
      pk_columns: 'contributions_pk_columns_input',
    },
    update_contributions_many: {
      updates: 'contributions_updates',
    },
    update_contributors: {
      _inc: 'contributors_inc_input',
      _set: 'contributors_set_input',
      where: 'contributors_bool_exp',
    },
    update_contributors_by_pk: {
      _inc: 'contributors_inc_input',
      _set: 'contributors_set_input',
      pk_columns: 'contributors_pk_columns_input',
    },
    update_contributors_many: {
      updates: 'contributors_updates',
    },
    update_robot_merkle_claims: {
      _append: 'robot_merkle_claims_append_input',
      _delete_at_path: 'robot_merkle_claims_delete_at_path_input',
      _delete_elem: 'robot_merkle_claims_delete_elem_input',
      _delete_key: 'robot_merkle_claims_delete_key_input',
      _prepend: 'robot_merkle_claims_prepend_input',
      _set: 'robot_merkle_claims_set_input',
      where: 'robot_merkle_claims_bool_exp',
    },
    update_robot_merkle_claims_by_pk: {
      _append: 'robot_merkle_claims_append_input',
      _delete_at_path: 'robot_merkle_claims_delete_at_path_input',
      _delete_elem: 'robot_merkle_claims_delete_elem_input',
      _delete_key: 'robot_merkle_claims_delete_key_input',
      _prepend: 'robot_merkle_claims_prepend_input',
      _set: 'robot_merkle_claims_set_input',
      pk_columns: 'robot_merkle_claims_pk_columns_input',
    },
    update_robot_merkle_claims_many: {
      updates: 'robot_merkle_claims_updates',
    },
    update_robot_merkle_roots: {
      _set: 'robot_merkle_roots_set_input',
      where: 'robot_merkle_roots_bool_exp',
    },
    update_robot_merkle_roots_by_pk: {
      _set: 'robot_merkle_roots_set_input',
      pk_columns: 'robot_merkle_roots_pk_columns_input',
    },
    update_robot_merkle_roots_many: {
      updates: 'robot_merkle_roots_updates',
    },
    update_robot_order: {
      _inc: 'robot_order_inc_input',
      _set: 'robot_order_set_input',
      where: 'robot_order_bool_exp',
    },
    update_robot_order_by_pk: {
      _inc: 'robot_order_inc_input',
      _set: 'robot_order_set_input',
      pk_columns: 'robot_order_pk_columns_input',
    },
    update_robot_order_many: {
      updates: 'robot_order_updates',
    },
    update_robot_product: {
      _append: 'robot_product_append_input',
      _delete_at_path: 'robot_product_delete_at_path_input',
      _delete_elem: 'robot_product_delete_elem_input',
      _delete_key: 'robot_product_delete_key_input',
      _inc: 'robot_product_inc_input',
      _prepend: 'robot_product_prepend_input',
      _set: 'robot_product_set_input',
      where: 'robot_product_bool_exp',
    },
    update_robot_product_by_pk: {
      _append: 'robot_product_append_input',
      _delete_at_path: 'robot_product_delete_at_path_input',
      _delete_elem: 'robot_product_delete_elem_input',
      _delete_key: 'robot_product_delete_key_input',
      _inc: 'robot_product_inc_input',
      _prepend: 'robot_product_prepend_input',
      _set: 'robot_product_set_input',
      pk_columns: 'robot_product_pk_columns_input',
    },
    update_robot_product_designer: {
      _inc: 'robot_product_designer_inc_input',
      _set: 'robot_product_designer_set_input',
      where: 'robot_product_designer_bool_exp',
    },
    update_robot_product_designer_by_pk: {
      _inc: 'robot_product_designer_inc_input',
      _set: 'robot_product_designer_set_input',
      pk_columns: 'robot_product_designer_pk_columns_input',
    },
    update_robot_product_designer_many: {
      updates: 'robot_product_designer_updates',
    },
    update_robot_product_many: {
      updates: 'robot_product_updates',
    },
    update_shop_api_users: {
      _set: 'shop_api_users_set_input',
      where: 'shop_api_users_bool_exp',
    },
    update_shop_api_users_by_pk: {
      _set: 'shop_api_users_set_input',
      pk_columns: 'shop_api_users_pk_columns_input',
    },
    update_shop_api_users_many: {
      updates: 'shop_api_users_updates',
    },
    update_shop_product_locks: {
      _set: 'shop_product_locks_set_input',
      where: 'shop_product_locks_bool_exp',
    },
    update_shop_product_locks_by_pk: {
      _set: 'shop_product_locks_set_input',
      pk_columns: 'shop_product_locks_pk_columns_input',
    },
    update_shop_product_locks_many: {
      updates: 'shop_product_locks_updates',
    },
    update_users: {
      _set: 'users_set_input',
      where: 'users_bool_exp',
    },
    update_users_by_pk: {
      _set: 'users_set_input',
      pk_columns: 'users_pk_columns_input',
    },
    update_users_many: {
      updates: 'users_updates',
    },
  },
  numeric: `scalar.numeric` as const,
  numeric_comparison_exp: {
    _eq: 'numeric',
    _gt: 'numeric',
    _gte: 'numeric',
    _in: 'numeric',
    _lt: 'numeric',
    _lte: 'numeric',
    _neq: 'numeric',
    _nin: 'numeric',
  },
  order_by: 'enum' as const,
  query_root: {
    contribution_votes: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
    contribution_votes_aggregate: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
    contribution_votes_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    contributions: {
      distinct_on: 'contributions_select_column',
      order_by: 'contributions_order_by',
      where: 'contributions_bool_exp',
    },
    contributions_aggregate: {
      distinct_on: 'contributions_select_column',
      order_by: 'contributions_order_by',
      where: 'contributions_bool_exp',
    },
    contributions_by_pk: {
      id: 'uuid',
    },
    contributors: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    contributors_aggregate: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    contributors_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    robot_merkle_claims: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
    robot_merkle_claims_aggregate: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
    robot_merkle_claims_by_pk: {
      id: 'uuid',
    },
    robot_merkle_roots: {
      distinct_on: 'robot_merkle_roots_select_column',
      order_by: 'robot_merkle_roots_order_by',
      where: 'robot_merkle_roots_bool_exp',
    },
    robot_merkle_roots_aggregate: {
      distinct_on: 'robot_merkle_roots_select_column',
      order_by: 'robot_merkle_roots_order_by',
      where: 'robot_merkle_roots_bool_exp',
    },
    robot_merkle_roots_by_pk: {},
    robot_order: {
      distinct_on: 'robot_order_select_column',
      order_by: 'robot_order_order_by',
      where: 'robot_order_bool_exp',
    },
    robot_order_aggregate: {
      distinct_on: 'robot_order_select_column',
      order_by: 'robot_order_order_by',
      where: 'robot_order_bool_exp',
    },
    robot_order_by_pk: {},
    robot_product: {
      distinct_on: 'robot_product_select_column',
      order_by: 'robot_product_order_by',
      where: 'robot_product_bool_exp',
    },
    robot_product_aggregate: {
      distinct_on: 'robot_product_select_column',
      order_by: 'robot_product_order_by',
      where: 'robot_product_bool_exp',
    },
    robot_product_by_pk: {},
    robot_product_designer: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    robot_product_designer_aggregate: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    robot_product_designer_by_pk: {},
    shop_api_users: {
      distinct_on: 'shop_api_users_select_column',
      order_by: 'shop_api_users_order_by',
      where: 'shop_api_users_bool_exp',
    },
    shop_api_users_aggregate: {
      distinct_on: 'shop_api_users_select_column',
      order_by: 'shop_api_users_order_by',
      where: 'shop_api_users_bool_exp',
    },
    shop_api_users_by_pk: {},
    shop_product_locks: {
      distinct_on: 'shop_product_locks_select_column',
      order_by: 'shop_product_locks_order_by',
      where: 'shop_product_locks_bool_exp',
    },
    shop_product_locks_aggregate: {
      distinct_on: 'shop_product_locks_select_column',
      order_by: 'shop_product_locks_order_by',
      where: 'shop_product_locks_bool_exp',
    },
    shop_product_locks_by_pk: {},
    users: {
      distinct_on: 'users_select_column',
      order_by: 'users_order_by',
      where: 'users_bool_exp',
    },
    users_aggregate: {
      distinct_on: 'users_select_column',
      order_by: 'users_order_by',
      where: 'users_bool_exp',
    },
    users_by_pk: {
      id: 'uuid',
    },
  },
  robot_merkle_claims: {
    claim_json: {},
  },
  robot_merkle_claims_aggregate_bool_exp: {
    count: 'robot_merkle_claims_aggregate_bool_exp_count',
  },
  robot_merkle_claims_aggregate_bool_exp_count: {
    arguments: 'robot_merkle_claims_select_column',
    filter: 'robot_merkle_claims_bool_exp',
    predicate: 'Int_comparison_exp',
  },
  robot_merkle_claims_aggregate_fields: {
    count: {
      columns: 'robot_merkle_claims_select_column',
    },
  },
  robot_merkle_claims_aggregate_order_by: {
    count: 'order_by',
    max: 'robot_merkle_claims_max_order_by',
    min: 'robot_merkle_claims_min_order_by',
  },
  robot_merkle_claims_append_input: {
    claim_json: 'jsonb',
  },
  robot_merkle_claims_arr_rel_insert_input: {
    data: 'robot_merkle_claims_insert_input',
    on_conflict: 'robot_merkle_claims_on_conflict',
  },
  robot_merkle_claims_bool_exp: {
    _and: 'robot_merkle_claims_bool_exp',
    _not: 'robot_merkle_claims_bool_exp',
    _or: 'robot_merkle_claims_bool_exp',
    claim_json: 'jsonb_comparison_exp',
    id: 'uuid_comparison_exp',
    merkle_root: 'robot_merkle_roots_bool_exp',
    merkle_root_hash: 'String_comparison_exp',
    recipient_eth_address: 'String_comparison_exp',
  },
  robot_merkle_claims_constraint: 'enum' as const,
  robot_merkle_claims_delete_at_path_input: {},
  robot_merkle_claims_delete_elem_input: {},
  robot_merkle_claims_delete_key_input: {},
  robot_merkle_claims_insert_input: {
    claim_json: 'jsonb',
    id: 'uuid',
    merkle_root: 'robot_merkle_roots_obj_rel_insert_input',
  },
  robot_merkle_claims_max_order_by: {
    id: 'order_by',
    merkle_root_hash: 'order_by',
    recipient_eth_address: 'order_by',
  },
  robot_merkle_claims_min_order_by: {
    id: 'order_by',
    merkle_root_hash: 'order_by',
    recipient_eth_address: 'order_by',
  },
  robot_merkle_claims_on_conflict: {
    constraint: 'robot_merkle_claims_constraint',
    update_columns: 'robot_merkle_claims_update_column',
    where: 'robot_merkle_claims_bool_exp',
  },
  robot_merkle_claims_order_by: {
    claim_json: 'order_by',
    id: 'order_by',
    merkle_root: 'robot_merkle_roots_order_by',
    merkle_root_hash: 'order_by',
    recipient_eth_address: 'order_by',
  },
  robot_merkle_claims_pk_columns_input: {
    id: 'uuid',
  },
  robot_merkle_claims_prepend_input: {
    claim_json: 'jsonb',
  },
  robot_merkle_claims_select_column: 'enum' as const,
  robot_merkle_claims_set_input: {
    claim_json: 'jsonb',
    id: 'uuid',
  },
  robot_merkle_claims_stream_cursor_input: {
    initial_value: 'robot_merkle_claims_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  robot_merkle_claims_stream_cursor_value_input: {
    claim_json: 'jsonb',
    id: 'uuid',
  },
  robot_merkle_claims_update_column: 'enum' as const,
  robot_merkle_claims_updates: {
    _append: 'robot_merkle_claims_append_input',
    _delete_at_path: 'robot_merkle_claims_delete_at_path_input',
    _delete_elem: 'robot_merkle_claims_delete_elem_input',
    _delete_key: 'robot_merkle_claims_delete_key_input',
    _prepend: 'robot_merkle_claims_prepend_input',
    _set: 'robot_merkle_claims_set_input',
    where: 'robot_merkle_claims_bool_exp',
  },
  robot_merkle_roots: {
    merkle_claims: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
    merkle_claims_aggregate: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
  },
  robot_merkle_roots_aggregate_fields: {
    count: {
      columns: 'robot_merkle_roots_select_column',
    },
  },
  robot_merkle_roots_bool_exp: {
    _and: 'robot_merkle_roots_bool_exp',
    _not: 'robot_merkle_roots_bool_exp',
    _or: 'robot_merkle_roots_bool_exp',
    contract_address: 'String_comparison_exp',
    created_at: 'timestamptz_comparison_exp',
    hash: 'String_comparison_exp',
    merkle_claims: 'robot_merkle_claims_bool_exp',
    merkle_claims_aggregate: 'robot_merkle_claims_aggregate_bool_exp',
    network: 'String_comparison_exp',
  },
  robot_merkle_roots_constraint: 'enum' as const,
  robot_merkle_roots_insert_input: {
    created_at: 'timestamptz',
    merkle_claims: 'robot_merkle_claims_arr_rel_insert_input',
  },
  robot_merkle_roots_obj_rel_insert_input: {
    data: 'robot_merkle_roots_insert_input',
    on_conflict: 'robot_merkle_roots_on_conflict',
  },
  robot_merkle_roots_on_conflict: {
    constraint: 'robot_merkle_roots_constraint',
    update_columns: 'robot_merkle_roots_update_column',
    where: 'robot_merkle_roots_bool_exp',
  },
  robot_merkle_roots_order_by: {
    contract_address: 'order_by',
    created_at: 'order_by',
    hash: 'order_by',
    merkle_claims_aggregate: 'robot_merkle_claims_aggregate_order_by',
    network: 'order_by',
  },
  robot_merkle_roots_pk_columns_input: {},
  robot_merkle_roots_select_column: 'enum' as const,
  robot_merkle_roots_set_input: {
    created_at: 'timestamptz',
  },
  robot_merkle_roots_stream_cursor_input: {
    initial_value: 'robot_merkle_roots_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  robot_merkle_roots_stream_cursor_value_input: {
    created_at: 'timestamptz',
  },
  robot_merkle_roots_update_column: 'enum' as const,
  robot_merkle_roots_updates: {
    _set: 'robot_merkle_roots_set_input',
    where: 'robot_merkle_roots_bool_exp',
  },
  robot_order_aggregate_fields: {
    count: {
      columns: 'robot_order_select_column',
    },
  },
  robot_order_bool_exp: {
    _and: 'robot_order_bool_exp',
    _not: 'robot_order_bool_exp',
    _or: 'robot_order_bool_exp',
    buyer_address: 'String_comparison_exp',
    buyer_reward: 'numeric_comparison_exp',
    date: 'date_comparison_exp',
    dollars_spent: 'numeric_comparison_exp',
    order_id: 'String_comparison_exp',
    order_number: 'String_comparison_exp',
    season: 'numeric_comparison_exp',
  },
  robot_order_constraint: 'enum' as const,
  robot_order_inc_input: {
    buyer_reward: 'numeric',
    dollars_spent: 'numeric',
    season: 'numeric',
  },
  robot_order_insert_input: {
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    season: 'numeric',
  },
  robot_order_on_conflict: {
    constraint: 'robot_order_constraint',
    update_columns: 'robot_order_update_column',
    where: 'robot_order_bool_exp',
  },
  robot_order_order_by: {
    buyer_address: 'order_by',
    buyer_reward: 'order_by',
    date: 'order_by',
    dollars_spent: 'order_by',
    order_id: 'order_by',
    order_number: 'order_by',
    season: 'order_by',
  },
  robot_order_pk_columns_input: {},
  robot_order_select_column: 'enum' as const,
  robot_order_set_input: {
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    season: 'numeric',
  },
  robot_order_stream_cursor_input: {
    initial_value: 'robot_order_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  robot_order_stream_cursor_value_input: {
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    season: 'numeric',
  },
  robot_order_update_column: 'enum' as const,
  robot_order_updates: {
    _inc: 'robot_order_inc_input',
    _set: 'robot_order_set_input',
    where: 'robot_order_bool_exp',
  },
  robot_product: {
    designers: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    designers_aggregate: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    nft_metadata: {},
  },
  robot_product_aggregate_fields: {
    count: {
      columns: 'robot_product_select_column',
    },
  },
  robot_product_append_input: {
    nft_metadata: 'jsonb',
  },
  robot_product_bool_exp: {
    _and: 'robot_product_bool_exp',
    _not: 'robot_product_bool_exp',
    _or: 'robot_product_bool_exp',
    designers: 'robot_product_designer_bool_exp',
    designers_aggregate: 'robot_product_designer_aggregate_bool_exp',
    id: 'String_comparison_exp',
    nft_metadata: 'jsonb_comparison_exp',
    nft_token_id: 'Int_comparison_exp',
    notion_id: 'String_comparison_exp',
    shopify_id: 'String_comparison_exp',
    title: 'String_comparison_exp',
  },
  robot_product_constraint: 'enum' as const,
  robot_product_delete_at_path_input: {},
  robot_product_delete_elem_input: {},
  robot_product_delete_key_input: {},
  robot_product_designer_aggregate_bool_exp: {
    count: 'robot_product_designer_aggregate_bool_exp_count',
  },
  robot_product_designer_aggregate_bool_exp_count: {
    arguments: 'robot_product_designer_select_column',
    filter: 'robot_product_designer_bool_exp',
    predicate: 'Int_comparison_exp',
  },
  robot_product_designer_aggregate_fields: {
    count: {
      columns: 'robot_product_designer_select_column',
    },
  },
  robot_product_designer_aggregate_order_by: {
    avg: 'robot_product_designer_avg_order_by',
    count: 'order_by',
    max: 'robot_product_designer_max_order_by',
    min: 'robot_product_designer_min_order_by',
    stddev: 'robot_product_designer_stddev_order_by',
    stddev_pop: 'robot_product_designer_stddev_pop_order_by',
    stddev_samp: 'robot_product_designer_stddev_samp_order_by',
    sum: 'robot_product_designer_sum_order_by',
    var_pop: 'robot_product_designer_var_pop_order_by',
    var_samp: 'robot_product_designer_var_samp_order_by',
    variance: 'robot_product_designer_variance_order_by',
  },
  robot_product_designer_arr_rel_insert_input: {
    data: 'robot_product_designer_insert_input',
    on_conflict: 'robot_product_designer_on_conflict',
  },
  robot_product_designer_avg_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_bool_exp: {
    _and: 'robot_product_designer_bool_exp',
    _not: 'robot_product_designer_bool_exp',
    _or: 'robot_product_designer_bool_exp',
    contribution_share: 'numeric_comparison_exp',
    designer_name: 'String_comparison_exp',
    eth_address: 'String_comparison_exp',
    product: 'robot_product_bool_exp',
    product_id: 'String_comparison_exp',
    robot_reward: 'numeric_comparison_exp',
  },
  robot_product_designer_constraint: 'enum' as const,
  robot_product_designer_inc_input: {
    contribution_share: 'numeric',
    robot_reward: 'numeric',
  },
  robot_product_designer_insert_input: {
    contribution_share: 'numeric',
    product: 'robot_product_obj_rel_insert_input',
    robot_reward: 'numeric',
  },
  robot_product_designer_max_order_by: {
    contribution_share: 'order_by',
    designer_name: 'order_by',
    eth_address: 'order_by',
    product_id: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_min_order_by: {
    contribution_share: 'order_by',
    designer_name: 'order_by',
    eth_address: 'order_by',
    product_id: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_on_conflict: {
    constraint: 'robot_product_designer_constraint',
    update_columns: 'robot_product_designer_update_column',
    where: 'robot_product_designer_bool_exp',
  },
  robot_product_designer_order_by: {
    contribution_share: 'order_by',
    designer_name: 'order_by',
    eth_address: 'order_by',
    product: 'robot_product_order_by',
    product_id: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_pk_columns_input: {},
  robot_product_designer_select_column: 'enum' as const,
  robot_product_designer_set_input: {
    contribution_share: 'numeric',
    robot_reward: 'numeric',
  },
  robot_product_designer_stddev_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_stddev_pop_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_stddev_samp_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_stream_cursor_input: {
    initial_value: 'robot_product_designer_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  robot_product_designer_stream_cursor_value_input: {
    contribution_share: 'numeric',
    robot_reward: 'numeric',
  },
  robot_product_designer_sum_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_update_column: 'enum' as const,
  robot_product_designer_updates: {
    _inc: 'robot_product_designer_inc_input',
    _set: 'robot_product_designer_set_input',
    where: 'robot_product_designer_bool_exp',
  },
  robot_product_designer_var_pop_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_var_samp_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_designer_variance_order_by: {
    contribution_share: 'order_by',
    robot_reward: 'order_by',
  },
  robot_product_inc_input: {},
  robot_product_insert_input: {
    designers: 'robot_product_designer_arr_rel_insert_input',
    nft_metadata: 'jsonb',
  },
  robot_product_obj_rel_insert_input: {
    data: 'robot_product_insert_input',
    on_conflict: 'robot_product_on_conflict',
  },
  robot_product_on_conflict: {
    constraint: 'robot_product_constraint',
    update_columns: 'robot_product_update_column',
    where: 'robot_product_bool_exp',
  },
  robot_product_order_by: {
    designers_aggregate: 'robot_product_designer_aggregate_order_by',
    id: 'order_by',
    nft_metadata: 'order_by',
    nft_token_id: 'order_by',
    notion_id: 'order_by',
    shopify_id: 'order_by',
    title: 'order_by',
  },
  robot_product_pk_columns_input: {},
  robot_product_prepend_input: {
    nft_metadata: 'jsonb',
  },
  robot_product_select_column: 'enum' as const,
  robot_product_set_input: {
    nft_metadata: 'jsonb',
  },
  robot_product_stream_cursor_input: {
    initial_value: 'robot_product_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  robot_product_stream_cursor_value_input: {
    nft_metadata: 'jsonb',
  },
  robot_product_update_column: 'enum' as const,
  robot_product_updates: {
    _append: 'robot_product_append_input',
    _delete_at_path: 'robot_product_delete_at_path_input',
    _delete_elem: 'robot_product_delete_elem_input',
    _delete_key: 'robot_product_delete_key_input',
    _inc: 'robot_product_inc_input',
    _prepend: 'robot_product_prepend_input',
    _set: 'robot_product_set_input',
    where: 'robot_product_bool_exp',
  },
  shop_api_users_aggregate_fields: {
    count: {
      columns: 'shop_api_users_select_column',
    },
  },
  shop_api_users_bool_exp: {
    _and: 'shop_api_users_bool_exp',
    _not: 'shop_api_users_bool_exp',
    _or: 'shop_api_users_bool_exp',
    password_hash: 'String_comparison_exp',
    username: 'String_comparison_exp',
  },
  shop_api_users_constraint: 'enum' as const,
  shop_api_users_insert_input: {},
  shop_api_users_on_conflict: {
    constraint: 'shop_api_users_constraint',
    update_columns: 'shop_api_users_update_column',
    where: 'shop_api_users_bool_exp',
  },
  shop_api_users_order_by: {
    password_hash: 'order_by',
    username: 'order_by',
  },
  shop_api_users_pk_columns_input: {},
  shop_api_users_select_column: 'enum' as const,
  shop_api_users_set_input: {},
  shop_api_users_stream_cursor_input: {
    initial_value: 'shop_api_users_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  shop_api_users_stream_cursor_value_input: {},
  shop_api_users_update_column: 'enum' as const,
  shop_api_users_updates: {
    _set: 'shop_api_users_set_input',
    where: 'shop_api_users_bool_exp',
  },
  shop_product_locks_aggregate_fields: {
    count: {
      columns: 'shop_product_locks_select_column',
    },
  },
  shop_product_locks_bool_exp: {
    _and: 'shop_product_locks_bool_exp',
    _not: 'shop_product_locks_bool_exp',
    _or: 'shop_product_locks_bool_exp',
    access_code: 'String_comparison_exp',
    created_at: 'timestamptz_comparison_exp',
    customer_eth_address: 'String_comparison_exp',
    lock_id: 'String_comparison_exp',
  },
  shop_product_locks_constraint: 'enum' as const,
  shop_product_locks_insert_input: {
    created_at: 'timestamptz',
  },
  shop_product_locks_on_conflict: {
    constraint: 'shop_product_locks_constraint',
    update_columns: 'shop_product_locks_update_column',
    where: 'shop_product_locks_bool_exp',
  },
  shop_product_locks_order_by: {
    access_code: 'order_by',
    created_at: 'order_by',
    customer_eth_address: 'order_by',
    lock_id: 'order_by',
  },
  shop_product_locks_pk_columns_input: {},
  shop_product_locks_select_column: 'enum' as const,
  shop_product_locks_set_input: {
    created_at: 'timestamptz',
  },
  shop_product_locks_stream_cursor_input: {
    initial_value: 'shop_product_locks_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  shop_product_locks_stream_cursor_value_input: {
    created_at: 'timestamptz',
  },
  shop_product_locks_update_column: 'enum' as const,
  shop_product_locks_updates: {
    _set: 'shop_product_locks_set_input',
    where: 'shop_product_locks_bool_exp',
  },
  subscription_root: {
    contribution_votes: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
    contribution_votes_aggregate: {
      distinct_on: 'contribution_votes_select_column',
      order_by: 'contribution_votes_order_by',
      where: 'contribution_votes_bool_exp',
    },
    contribution_votes_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    contribution_votes_stream: {
      cursor: 'contribution_votes_stream_cursor_input',
      where: 'contribution_votes_bool_exp',
    },
    contributions: {
      distinct_on: 'contributions_select_column',
      order_by: 'contributions_order_by',
      where: 'contributions_bool_exp',
    },
    contributions_aggregate: {
      distinct_on: 'contributions_select_column',
      order_by: 'contributions_order_by',
      where: 'contributions_bool_exp',
    },
    contributions_by_pk: {
      id: 'uuid',
    },
    contributions_stream: {
      cursor: 'contributions_stream_cursor_input',
      where: 'contributions_bool_exp',
    },
    contributors: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    contributors_aggregate: {
      distinct_on: 'contributors_select_column',
      order_by: 'contributors_order_by',
      where: 'contributors_bool_exp',
    },
    contributors_by_pk: {
      contribution_id: 'uuid',
      user_id: 'uuid',
    },
    contributors_stream: {
      cursor: 'contributors_stream_cursor_input',
      where: 'contributors_bool_exp',
    },
    robot_merkle_claims: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
    robot_merkle_claims_aggregate: {
      distinct_on: 'robot_merkle_claims_select_column',
      order_by: 'robot_merkle_claims_order_by',
      where: 'robot_merkle_claims_bool_exp',
    },
    robot_merkle_claims_by_pk: {
      id: 'uuid',
    },
    robot_merkle_claims_stream: {
      cursor: 'robot_merkle_claims_stream_cursor_input',
      where: 'robot_merkle_claims_bool_exp',
    },
    robot_merkle_roots: {
      distinct_on: 'robot_merkle_roots_select_column',
      order_by: 'robot_merkle_roots_order_by',
      where: 'robot_merkle_roots_bool_exp',
    },
    robot_merkle_roots_aggregate: {
      distinct_on: 'robot_merkle_roots_select_column',
      order_by: 'robot_merkle_roots_order_by',
      where: 'robot_merkle_roots_bool_exp',
    },
    robot_merkle_roots_by_pk: {},
    robot_merkle_roots_stream: {
      cursor: 'robot_merkle_roots_stream_cursor_input',
      where: 'robot_merkle_roots_bool_exp',
    },
    robot_order: {
      distinct_on: 'robot_order_select_column',
      order_by: 'robot_order_order_by',
      where: 'robot_order_bool_exp',
    },
    robot_order_aggregate: {
      distinct_on: 'robot_order_select_column',
      order_by: 'robot_order_order_by',
      where: 'robot_order_bool_exp',
    },
    robot_order_by_pk: {},
    robot_order_stream: {
      cursor: 'robot_order_stream_cursor_input',
      where: 'robot_order_bool_exp',
    },
    robot_product: {
      distinct_on: 'robot_product_select_column',
      order_by: 'robot_product_order_by',
      where: 'robot_product_bool_exp',
    },
    robot_product_aggregate: {
      distinct_on: 'robot_product_select_column',
      order_by: 'robot_product_order_by',
      where: 'robot_product_bool_exp',
    },
    robot_product_by_pk: {},
    robot_product_designer: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    robot_product_designer_aggregate: {
      distinct_on: 'robot_product_designer_select_column',
      order_by: 'robot_product_designer_order_by',
      where: 'robot_product_designer_bool_exp',
    },
    robot_product_designer_by_pk: {},
    robot_product_designer_stream: {
      cursor: 'robot_product_designer_stream_cursor_input',
      where: 'robot_product_designer_bool_exp',
    },
    robot_product_stream: {
      cursor: 'robot_product_stream_cursor_input',
      where: 'robot_product_bool_exp',
    },
    shop_api_users: {
      distinct_on: 'shop_api_users_select_column',
      order_by: 'shop_api_users_order_by',
      where: 'shop_api_users_bool_exp',
    },
    shop_api_users_aggregate: {
      distinct_on: 'shop_api_users_select_column',
      order_by: 'shop_api_users_order_by',
      where: 'shop_api_users_bool_exp',
    },
    shop_api_users_by_pk: {},
    shop_api_users_stream: {
      cursor: 'shop_api_users_stream_cursor_input',
      where: 'shop_api_users_bool_exp',
    },
    shop_product_locks: {
      distinct_on: 'shop_product_locks_select_column',
      order_by: 'shop_product_locks_order_by',
      where: 'shop_product_locks_bool_exp',
    },
    shop_product_locks_aggregate: {
      distinct_on: 'shop_product_locks_select_column',
      order_by: 'shop_product_locks_order_by',
      where: 'shop_product_locks_bool_exp',
    },
    shop_product_locks_by_pk: {},
    shop_product_locks_stream: {
      cursor: 'shop_product_locks_stream_cursor_input',
      where: 'shop_product_locks_bool_exp',
    },
    users: {
      distinct_on: 'users_select_column',
      order_by: 'users_order_by',
      where: 'users_bool_exp',
    },
    users_aggregate: {
      distinct_on: 'users_select_column',
      order_by: 'users_order_by',
      where: 'users_bool_exp',
    },
    users_by_pk: {
      id: 'uuid',
    },
    users_stream: {
      cursor: 'users_stream_cursor_input',
      where: 'users_bool_exp',
    },
  },
  timestamptz: `scalar.timestamptz` as const,
  timestamptz_comparison_exp: {
    _eq: 'timestamptz',
    _gt: 'timestamptz',
    _gte: 'timestamptz',
    _in: 'timestamptz',
    _lt: 'timestamptz',
    _lte: 'timestamptz',
    _neq: 'timestamptz',
    _nin: 'timestamptz',
  },
  users_aggregate_fields: {
    count: {
      columns: 'users_select_column',
    },
  },
  users_bool_exp: {
    _and: 'users_bool_exp',
    _not: 'users_bool_exp',
    _or: 'users_bool_exp',
    eth_address: 'String_comparison_exp',
    id: 'uuid_comparison_exp',
    name: 'String_comparison_exp',
  },
  users_constraint: 'enum' as const,
  users_insert_input: {
    id: 'uuid',
  },
  users_obj_rel_insert_input: {
    data: 'users_insert_input',
    on_conflict: 'users_on_conflict',
  },
  users_on_conflict: {
    constraint: 'users_constraint',
    update_columns: 'users_update_column',
    where: 'users_bool_exp',
  },
  users_order_by: {
    eth_address: 'order_by',
    id: 'order_by',
    name: 'order_by',
  },
  users_pk_columns_input: {
    id: 'uuid',
  },
  users_select_column: 'enum' as const,
  users_set_input: {
    id: 'uuid',
  },
  users_stream_cursor_input: {
    initial_value: 'users_stream_cursor_value_input',
    ordering: 'cursor_ordering',
  },
  users_stream_cursor_value_input: {
    id: 'uuid',
  },
  users_update_column: 'enum' as const,
  users_updates: {
    _set: 'users_set_input',
    where: 'users_bool_exp',
  },
  uuid: `scalar.uuid` as const,
  uuid_comparison_exp: {
    _eq: 'uuid',
    _gt: 'uuid',
    _gte: 'uuid',
    _in: 'uuid',
    _lt: 'uuid',
    _lte: 'uuid',
    _neq: 'uuid',
    _nin: 'uuid',
  },
};

export const ReturnTypes: Record<string, any> = {
  cached: {
    ttl: 'Int',
    refresh: 'Boolean',
  },
  contribution_votes: {
    contribution: 'contributions',
    contribution_id: 'uuid',
    rating: 'String',
    user: 'users',
    user_id: 'uuid',
  },
  contribution_votes_aggregate: {
    aggregate: 'contribution_votes_aggregate_fields',
    nodes: 'contribution_votes',
  },
  contribution_votes_aggregate_fields: {
    count: 'Int',
    max: 'contribution_votes_max_fields',
    min: 'contribution_votes_min_fields',
  },
  contribution_votes_max_fields: {
    contribution_id: 'uuid',
    rating: 'String',
    user_id: 'uuid',
  },
  contribution_votes_min_fields: {
    contribution_id: 'uuid',
    rating: 'String',
    user_id: 'uuid',
  },
  contribution_votes_mutation_response: {
    affected_rows: 'Int',
    returning: 'contribution_votes',
  },
  contributions: {
    artifact: 'String',
    author: 'users',
    category: 'String',
    contributors: 'contributors',
    contributors_aggregate: 'contributors_aggregate',
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    description: 'String',
    effort: 'String',
    id: 'uuid',
    impact: 'String',
    title: 'String',
    votes: 'contribution_votes',
    votes_aggregate: 'contribution_votes_aggregate',
    weight: 'Int',
  },
  contributions_aggregate: {
    aggregate: 'contributions_aggregate_fields',
    nodes: 'contributions',
  },
  contributions_aggregate_fields: {
    avg: 'contributions_avg_fields',
    count: 'Int',
    max: 'contributions_max_fields',
    min: 'contributions_min_fields',
    stddev: 'contributions_stddev_fields',
    stddev_pop: 'contributions_stddev_pop_fields',
    stddev_samp: 'contributions_stddev_samp_fields',
    sum: 'contributions_sum_fields',
    var_pop: 'contributions_var_pop_fields',
    var_samp: 'contributions_var_samp_fields',
    variance: 'contributions_variance_fields',
  },
  contributions_avg_fields: {
    weight: 'Float',
  },
  contributions_max_fields: {
    artifact: 'String',
    category: 'String',
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    description: 'String',
    effort: 'String',
    id: 'uuid',
    impact: 'String',
    title: 'String',
    weight: 'Int',
  },
  contributions_min_fields: {
    artifact: 'String',
    category: 'String',
    created_at: 'timestamptz',
    created_by: 'uuid',
    date: 'date',
    description: 'String',
    effort: 'String',
    id: 'uuid',
    impact: 'String',
    title: 'String',
    weight: 'Int',
  },
  contributions_mutation_response: {
    affected_rows: 'Int',
    returning: 'contributions',
  },
  contributions_stddev_fields: {
    weight: 'Float',
  },
  contributions_stddev_pop_fields: {
    weight: 'Float',
  },
  contributions_stddev_samp_fields: {
    weight: 'Float',
  },
  contributions_sum_fields: {
    weight: 'Int',
  },
  contributions_var_pop_fields: {
    weight: 'Float',
  },
  contributions_var_samp_fields: {
    weight: 'Float',
  },
  contributions_variance_fields: {
    weight: 'Float',
  },
  contributors: {
    contribution: 'contributions',
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user: 'users',
    user_id: 'uuid',
  },
  contributors_aggregate: {
    aggregate: 'contributors_aggregate_fields',
    nodes: 'contributors',
  },
  contributors_aggregate_fields: {
    avg: 'contributors_avg_fields',
    count: 'Int',
    max: 'contributors_max_fields',
    min: 'contributors_min_fields',
    stddev: 'contributors_stddev_fields',
    stddev_pop: 'contributors_stddev_pop_fields',
    stddev_samp: 'contributors_stddev_samp_fields',
    sum: 'contributors_sum_fields',
    var_pop: 'contributors_var_pop_fields',
    var_samp: 'contributors_var_samp_fields',
    variance: 'contributors_variance_fields',
  },
  contributors_avg_fields: {
    contribution_share: 'Float',
  },
  contributors_max_fields: {
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user_id: 'uuid',
  },
  contributors_min_fields: {
    contribution_id: 'uuid',
    contribution_share: 'numeric',
    user_id: 'uuid',
  },
  contributors_mutation_response: {
    affected_rows: 'Int',
    returning: 'contributors',
  },
  contributors_stddev_fields: {
    contribution_share: 'Float',
  },
  contributors_stddev_pop_fields: {
    contribution_share: 'Float',
  },
  contributors_stddev_samp_fields: {
    contribution_share: 'Float',
  },
  contributors_sum_fields: {
    contribution_share: 'numeric',
  },
  contributors_var_pop_fields: {
    contribution_share: 'Float',
  },
  contributors_var_samp_fields: {
    contribution_share: 'Float',
  },
  contributors_variance_fields: {
    contribution_share: 'Float',
  },
  date: `scalar.date` as const,
  jsonb: `scalar.jsonb` as const,
  mutation_root: {
    delete_contribution_votes: 'contribution_votes_mutation_response',
    delete_contribution_votes_by_pk: 'contribution_votes',
    delete_contributions: 'contributions_mutation_response',
    delete_contributions_by_pk: 'contributions',
    delete_contributors: 'contributors_mutation_response',
    delete_contributors_by_pk: 'contributors',
    delete_robot_merkle_claims: 'robot_merkle_claims_mutation_response',
    delete_robot_merkle_claims_by_pk: 'robot_merkle_claims',
    delete_robot_merkle_roots: 'robot_merkle_roots_mutation_response',
    delete_robot_merkle_roots_by_pk: 'robot_merkle_roots',
    delete_robot_order: 'robot_order_mutation_response',
    delete_robot_order_by_pk: 'robot_order',
    delete_robot_product: 'robot_product_mutation_response',
    delete_robot_product_by_pk: 'robot_product',
    delete_robot_product_designer: 'robot_product_designer_mutation_response',
    delete_robot_product_designer_by_pk: 'robot_product_designer',
    delete_shop_api_users: 'shop_api_users_mutation_response',
    delete_shop_api_users_by_pk: 'shop_api_users',
    delete_shop_product_locks: 'shop_product_locks_mutation_response',
    delete_shop_product_locks_by_pk: 'shop_product_locks',
    delete_users: 'users_mutation_response',
    delete_users_by_pk: 'users',
    insert_contribution_votes: 'contribution_votes_mutation_response',
    insert_contribution_votes_one: 'contribution_votes',
    insert_contributions: 'contributions_mutation_response',
    insert_contributions_one: 'contributions',
    insert_contributors: 'contributors_mutation_response',
    insert_contributors_one: 'contributors',
    insert_robot_merkle_claims: 'robot_merkle_claims_mutation_response',
    insert_robot_merkle_claims_one: 'robot_merkle_claims',
    insert_robot_merkle_roots: 'robot_merkle_roots_mutation_response',
    insert_robot_merkle_roots_one: 'robot_merkle_roots',
    insert_robot_order: 'robot_order_mutation_response',
    insert_robot_order_one: 'robot_order',
    insert_robot_product: 'robot_product_mutation_response',
    insert_robot_product_designer: 'robot_product_designer_mutation_response',
    insert_robot_product_designer_one: 'robot_product_designer',
    insert_robot_product_one: 'robot_product',
    insert_shop_api_users: 'shop_api_users_mutation_response',
    insert_shop_api_users_one: 'shop_api_users',
    insert_shop_product_locks: 'shop_product_locks_mutation_response',
    insert_shop_product_locks_one: 'shop_product_locks',
    insert_users: 'users_mutation_response',
    insert_users_one: 'users',
    update_contribution_votes: 'contribution_votes_mutation_response',
    update_contribution_votes_by_pk: 'contribution_votes',
    update_contribution_votes_many: 'contribution_votes_mutation_response',
    update_contributions: 'contributions_mutation_response',
    update_contributions_by_pk: 'contributions',
    update_contributions_many: 'contributions_mutation_response',
    update_contributors: 'contributors_mutation_response',
    update_contributors_by_pk: 'contributors',
    update_contributors_many: 'contributors_mutation_response',
    update_robot_merkle_claims: 'robot_merkle_claims_mutation_response',
    update_robot_merkle_claims_by_pk: 'robot_merkle_claims',
    update_robot_merkle_claims_many: 'robot_merkle_claims_mutation_response',
    update_robot_merkle_roots: 'robot_merkle_roots_mutation_response',
    update_robot_merkle_roots_by_pk: 'robot_merkle_roots',
    update_robot_merkle_roots_many: 'robot_merkle_roots_mutation_response',
    update_robot_order: 'robot_order_mutation_response',
    update_robot_order_by_pk: 'robot_order',
    update_robot_order_many: 'robot_order_mutation_response',
    update_robot_product: 'robot_product_mutation_response',
    update_robot_product_by_pk: 'robot_product',
    update_robot_product_designer: 'robot_product_designer_mutation_response',
    update_robot_product_designer_by_pk: 'robot_product_designer',
    update_robot_product_designer_many:
      'robot_product_designer_mutation_response',
    update_robot_product_many: 'robot_product_mutation_response',
    update_shop_api_users: 'shop_api_users_mutation_response',
    update_shop_api_users_by_pk: 'shop_api_users',
    update_shop_api_users_many: 'shop_api_users_mutation_response',
    update_shop_product_locks: 'shop_product_locks_mutation_response',
    update_shop_product_locks_by_pk: 'shop_product_locks',
    update_shop_product_locks_many: 'shop_product_locks_mutation_response',
    update_users: 'users_mutation_response',
    update_users_by_pk: 'users',
    update_users_many: 'users_mutation_response',
  },
  numeric: `scalar.numeric` as const,
  query_root: {
    contribution_votes: 'contribution_votes',
    contribution_votes_aggregate: 'contribution_votes_aggregate',
    contribution_votes_by_pk: 'contribution_votes',
    contributions: 'contributions',
    contributions_aggregate: 'contributions_aggregate',
    contributions_by_pk: 'contributions',
    contributors: 'contributors',
    contributors_aggregate: 'contributors_aggregate',
    contributors_by_pk: 'contributors',
    robot_merkle_claims: 'robot_merkle_claims',
    robot_merkle_claims_aggregate: 'robot_merkle_claims_aggregate',
    robot_merkle_claims_by_pk: 'robot_merkle_claims',
    robot_merkle_roots: 'robot_merkle_roots',
    robot_merkle_roots_aggregate: 'robot_merkle_roots_aggregate',
    robot_merkle_roots_by_pk: 'robot_merkle_roots',
    robot_order: 'robot_order',
    robot_order_aggregate: 'robot_order_aggregate',
    robot_order_by_pk: 'robot_order',
    robot_product: 'robot_product',
    robot_product_aggregate: 'robot_product_aggregate',
    robot_product_by_pk: 'robot_product',
    robot_product_designer: 'robot_product_designer',
    robot_product_designer_aggregate: 'robot_product_designer_aggregate',
    robot_product_designer_by_pk: 'robot_product_designer',
    shop_api_users: 'shop_api_users',
    shop_api_users_aggregate: 'shop_api_users_aggregate',
    shop_api_users_by_pk: 'shop_api_users',
    shop_product_locks: 'shop_product_locks',
    shop_product_locks_aggregate: 'shop_product_locks_aggregate',
    shop_product_locks_by_pk: 'shop_product_locks',
    users: 'users',
    users_aggregate: 'users_aggregate',
    users_by_pk: 'users',
  },
  robot_merkle_claims: {
    claim_json: 'jsonb',
    id: 'uuid',
    merkle_root: 'robot_merkle_roots',
    merkle_root_hash: 'String',
    recipient_eth_address: 'String',
  },
  robot_merkle_claims_aggregate: {
    aggregate: 'robot_merkle_claims_aggregate_fields',
    nodes: 'robot_merkle_claims',
  },
  robot_merkle_claims_aggregate_fields: {
    count: 'Int',
    max: 'robot_merkle_claims_max_fields',
    min: 'robot_merkle_claims_min_fields',
  },
  robot_merkle_claims_max_fields: {
    id: 'uuid',
    merkle_root_hash: 'String',
    recipient_eth_address: 'String',
  },
  robot_merkle_claims_min_fields: {
    id: 'uuid',
    merkle_root_hash: 'String',
    recipient_eth_address: 'String',
  },
  robot_merkle_claims_mutation_response: {
    affected_rows: 'Int',
    returning: 'robot_merkle_claims',
  },
  robot_merkle_roots: {
    contract_address: 'String',
    created_at: 'timestamptz',
    hash: 'String',
    merkle_claims: 'robot_merkle_claims',
    merkle_claims_aggregate: 'robot_merkle_claims_aggregate',
    network: 'String',
  },
  robot_merkle_roots_aggregate: {
    aggregate: 'robot_merkle_roots_aggregate_fields',
    nodes: 'robot_merkle_roots',
  },
  robot_merkle_roots_aggregate_fields: {
    count: 'Int',
    max: 'robot_merkle_roots_max_fields',
    min: 'robot_merkle_roots_min_fields',
  },
  robot_merkle_roots_max_fields: {
    contract_address: 'String',
    created_at: 'timestamptz',
    hash: 'String',
    network: 'String',
  },
  robot_merkle_roots_min_fields: {
    contract_address: 'String',
    created_at: 'timestamptz',
    hash: 'String',
    network: 'String',
  },
  robot_merkle_roots_mutation_response: {
    affected_rows: 'Int',
    returning: 'robot_merkle_roots',
  },
  robot_order: {
    buyer_address: 'String',
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    order_id: 'String',
    order_number: 'String',
    season: 'numeric',
  },
  robot_order_aggregate: {
    aggregate: 'robot_order_aggregate_fields',
    nodes: 'robot_order',
  },
  robot_order_aggregate_fields: {
    avg: 'robot_order_avg_fields',
    count: 'Int',
    max: 'robot_order_max_fields',
    min: 'robot_order_min_fields',
    stddev: 'robot_order_stddev_fields',
    stddev_pop: 'robot_order_stddev_pop_fields',
    stddev_samp: 'robot_order_stddev_samp_fields',
    sum: 'robot_order_sum_fields',
    var_pop: 'robot_order_var_pop_fields',
    var_samp: 'robot_order_var_samp_fields',
    variance: 'robot_order_variance_fields',
  },
  robot_order_avg_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_max_fields: {
    buyer_address: 'String',
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    order_id: 'String',
    order_number: 'String',
    season: 'numeric',
  },
  robot_order_min_fields: {
    buyer_address: 'String',
    buyer_reward: 'numeric',
    date: 'date',
    dollars_spent: 'numeric',
    order_id: 'String',
    order_number: 'String',
    season: 'numeric',
  },
  robot_order_mutation_response: {
    affected_rows: 'Int',
    returning: 'robot_order',
  },
  robot_order_stddev_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_stddev_pop_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_stddev_samp_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_sum_fields: {
    buyer_reward: 'numeric',
    dollars_spent: 'numeric',
    season: 'numeric',
  },
  robot_order_var_pop_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_var_samp_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_order_variance_fields: {
    buyer_reward: 'Float',
    dollars_spent: 'Float',
    season: 'Float',
  },
  robot_product: {
    designers: 'robot_product_designer',
    designers_aggregate: 'robot_product_designer_aggregate',
    id: 'String',
    nft_metadata: 'jsonb',
    nft_token_id: 'Int',
    notion_id: 'String',
    shopify_id: 'String',
    title: 'String',
  },
  robot_product_aggregate: {
    aggregate: 'robot_product_aggregate_fields',
    nodes: 'robot_product',
  },
  robot_product_aggregate_fields: {
    avg: 'robot_product_avg_fields',
    count: 'Int',
    max: 'robot_product_max_fields',
    min: 'robot_product_min_fields',
    stddev: 'robot_product_stddev_fields',
    stddev_pop: 'robot_product_stddev_pop_fields',
    stddev_samp: 'robot_product_stddev_samp_fields',
    sum: 'robot_product_sum_fields',
    var_pop: 'robot_product_var_pop_fields',
    var_samp: 'robot_product_var_samp_fields',
    variance: 'robot_product_variance_fields',
  },
  robot_product_avg_fields: {
    nft_token_id: 'Float',
  },
  robot_product_designer: {
    contribution_share: 'numeric',
    designer_name: 'String',
    eth_address: 'String',
    product: 'robot_product',
    product_id: 'String',
    robot_reward: 'numeric',
  },
  robot_product_designer_aggregate: {
    aggregate: 'robot_product_designer_aggregate_fields',
    nodes: 'robot_product_designer',
  },
  robot_product_designer_aggregate_fields: {
    avg: 'robot_product_designer_avg_fields',
    count: 'Int',
    max: 'robot_product_designer_max_fields',
    min: 'robot_product_designer_min_fields',
    stddev: 'robot_product_designer_stddev_fields',
    stddev_pop: 'robot_product_designer_stddev_pop_fields',
    stddev_samp: 'robot_product_designer_stddev_samp_fields',
    sum: 'robot_product_designer_sum_fields',
    var_pop: 'robot_product_designer_var_pop_fields',
    var_samp: 'robot_product_designer_var_samp_fields',
    variance: 'robot_product_designer_variance_fields',
  },
  robot_product_designer_avg_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_max_fields: {
    contribution_share: 'numeric',
    designer_name: 'String',
    eth_address: 'String',
    product_id: 'String',
    robot_reward: 'numeric',
  },
  robot_product_designer_min_fields: {
    contribution_share: 'numeric',
    designer_name: 'String',
    eth_address: 'String',
    product_id: 'String',
    robot_reward: 'numeric',
  },
  robot_product_designer_mutation_response: {
    affected_rows: 'Int',
    returning: 'robot_product_designer',
  },
  robot_product_designer_stddev_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_stddev_pop_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_stddev_samp_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_sum_fields: {
    contribution_share: 'numeric',
    robot_reward: 'numeric',
  },
  robot_product_designer_var_pop_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_var_samp_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_designer_variance_fields: {
    contribution_share: 'Float',
    robot_reward: 'Float',
  },
  robot_product_max_fields: {
    id: 'String',
    nft_token_id: 'Int',
    notion_id: 'String',
    shopify_id: 'String',
    title: 'String',
  },
  robot_product_min_fields: {
    id: 'String',
    nft_token_id: 'Int',
    notion_id: 'String',
    shopify_id: 'String',
    title: 'String',
  },
  robot_product_mutation_response: {
    affected_rows: 'Int',
    returning: 'robot_product',
  },
  robot_product_stddev_fields: {
    nft_token_id: 'Float',
  },
  robot_product_stddev_pop_fields: {
    nft_token_id: 'Float',
  },
  robot_product_stddev_samp_fields: {
    nft_token_id: 'Float',
  },
  robot_product_sum_fields: {
    nft_token_id: 'Int',
  },
  robot_product_var_pop_fields: {
    nft_token_id: 'Float',
  },
  robot_product_var_samp_fields: {
    nft_token_id: 'Float',
  },
  robot_product_variance_fields: {
    nft_token_id: 'Float',
  },
  shop_api_users: {
    password_hash: 'String',
    username: 'String',
  },
  shop_api_users_aggregate: {
    aggregate: 'shop_api_users_aggregate_fields',
    nodes: 'shop_api_users',
  },
  shop_api_users_aggregate_fields: {
    count: 'Int',
    max: 'shop_api_users_max_fields',
    min: 'shop_api_users_min_fields',
  },
  shop_api_users_max_fields: {
    password_hash: 'String',
    username: 'String',
  },
  shop_api_users_min_fields: {
    password_hash: 'String',
    username: 'String',
  },
  shop_api_users_mutation_response: {
    affected_rows: 'Int',
    returning: 'shop_api_users',
  },
  shop_product_locks: {
    access_code: 'String',
    created_at: 'timestamptz',
    customer_eth_address: 'String',
    lock_id: 'String',
  },
  shop_product_locks_aggregate: {
    aggregate: 'shop_product_locks_aggregate_fields',
    nodes: 'shop_product_locks',
  },
  shop_product_locks_aggregate_fields: {
    count: 'Int',
    max: 'shop_product_locks_max_fields',
    min: 'shop_product_locks_min_fields',
  },
  shop_product_locks_max_fields: {
    access_code: 'String',
    created_at: 'timestamptz',
    customer_eth_address: 'String',
    lock_id: 'String',
  },
  shop_product_locks_min_fields: {
    access_code: 'String',
    created_at: 'timestamptz',
    customer_eth_address: 'String',
    lock_id: 'String',
  },
  shop_product_locks_mutation_response: {
    affected_rows: 'Int',
    returning: 'shop_product_locks',
  },
  subscription_root: {
    contribution_votes: 'contribution_votes',
    contribution_votes_aggregate: 'contribution_votes_aggregate',
    contribution_votes_by_pk: 'contribution_votes',
    contribution_votes_stream: 'contribution_votes',
    contributions: 'contributions',
    contributions_aggregate: 'contributions_aggregate',
    contributions_by_pk: 'contributions',
    contributions_stream: 'contributions',
    contributors: 'contributors',
    contributors_aggregate: 'contributors_aggregate',
    contributors_by_pk: 'contributors',
    contributors_stream: 'contributors',
    robot_merkle_claims: 'robot_merkle_claims',
    robot_merkle_claims_aggregate: 'robot_merkle_claims_aggregate',
    robot_merkle_claims_by_pk: 'robot_merkle_claims',
    robot_merkle_claims_stream: 'robot_merkle_claims',
    robot_merkle_roots: 'robot_merkle_roots',
    robot_merkle_roots_aggregate: 'robot_merkle_roots_aggregate',
    robot_merkle_roots_by_pk: 'robot_merkle_roots',
    robot_merkle_roots_stream: 'robot_merkle_roots',
    robot_order: 'robot_order',
    robot_order_aggregate: 'robot_order_aggregate',
    robot_order_by_pk: 'robot_order',
    robot_order_stream: 'robot_order',
    robot_product: 'robot_product',
    robot_product_aggregate: 'robot_product_aggregate',
    robot_product_by_pk: 'robot_product',
    robot_product_designer: 'robot_product_designer',
    robot_product_designer_aggregate: 'robot_product_designer_aggregate',
    robot_product_designer_by_pk: 'robot_product_designer',
    robot_product_designer_stream: 'robot_product_designer',
    robot_product_stream: 'robot_product',
    shop_api_users: 'shop_api_users',
    shop_api_users_aggregate: 'shop_api_users_aggregate',
    shop_api_users_by_pk: 'shop_api_users',
    shop_api_users_stream: 'shop_api_users',
    shop_product_locks: 'shop_product_locks',
    shop_product_locks_aggregate: 'shop_product_locks_aggregate',
    shop_product_locks_by_pk: 'shop_product_locks',
    shop_product_locks_stream: 'shop_product_locks',
    users: 'users',
    users_aggregate: 'users_aggregate',
    users_by_pk: 'users',
    users_stream: 'users',
  },
  timestamptz: `scalar.timestamptz` as const,
  users: {
    eth_address: 'String',
    id: 'uuid',
    name: 'String',
  },
  users_aggregate: {
    aggregate: 'users_aggregate_fields',
    nodes: 'users',
  },
  users_aggregate_fields: {
    count: 'Int',
    max: 'users_max_fields',
    min: 'users_min_fields',
  },
  users_max_fields: {
    eth_address: 'String',
    id: 'uuid',
    name: 'String',
  },
  users_min_fields: {
    eth_address: 'String',
    id: 'uuid',
    name: 'String',
  },
  users_mutation_response: {
    affected_rows: 'Int',
    returning: 'users',
  },
  uuid: `scalar.uuid` as const,
};

export const Ops = {
  mutation: 'mutation_root' as const,
  query: 'query_root' as const,
  subscription: 'subscription_root' as const,
};
