version: '3.6'

services:
  postgres:
    image: postgis/postgis:13-master
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - directus
    ports:
      ## Expose the port for tooling (SQL language server in IDE, connecting with GUI's etc)
      - ${LOCAL_POSTGRES_PORT}:${LOCAL_POSTGRES_PORT}
    environment:
      POSTGRES_PASSWORD: ${LOCAL_POSTGRES_PASSWORD}

  #  graphql-engine:
  #    image: hasura/graphql-engine:v2.7.0.cli-migrations-v3
  #    volumes:
  #      - ./hasura/migrations:/hasura-migrations
  #      - ./hasura/metadata:/hasura-metadata
  #    ports:
  #      - '8080:8080'
  #    depends_on:
  #      - 'postgres'
  #    restart: always
  #    environment:
  #      ## Actions endpoint
  #      NEXTJS_SERVER_URL: http://host.docker.internal:3000
  #      ## postgres database to store Hasura metadata
  #      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
  #      ## this env var can be used to add the above postgres database to Hasura as a data source.
  #      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
  #      HEROKU_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
  #      ## enable debugging mode. It is recommended to disable this in production
  #      HASURA_GRAPHQL_DEV_MODE: 'true'
  #      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
  #      ## uncomment next line to set an admin secret
  #      HASURA_GRAPHQL_AUTH_HOOK: http://host.docker.internal:3000/api/hasuraAuthWebhook
  #      HASURA_GRAPHQL_ADMIN_SECRET: admin-secret
  cache:
    container_name: cache
    image: redis:6
    networks:
      - directus

  directus:
    container_name: directus
    build:
      context: ./packages/cms
      args:
        OIDC_CLIENT_ID: ${DIRECTUS_SIWE_CLIENT_ID}
        OIDC_CLIENT_SECRET: ${DIRECTUS_SIWE_CLIENT_SECRET}
        OIDC_ISSUER_URL: ${DIRECTUS_SIWE_ISSUER_URL}
    ports:
      - ${LOCAL_DIRECTUS_PORT:-8055}:${LOCAL_DIRECTUS_PORT:-8055}
    #    volumes:
    #      # By default, uploads are stored in /directus/uploads
    #      # Always make sure your volumes matches the storage root when using
    #      # local driver
    #      - ./packages/cms/uploads:/directus/uploads
    #      # Make sure to also mount the volume when using SQLite
    #      # - ./database:/directus/database
    #      # If you want to load extensions from the host
    #      - ./packages/cms/extensions:/directus/extensions
    networks:
      - directus
    depends_on:
      - cache
      - postgres
    environment:
      # Make sure to set these in production
      # (see https://docs.directus.io/configuration/config-options/#general)
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      PUBLIC_URL: ${DIRECTUS_PUBLIC_URL}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD}

      # DB Settings
      DB_CLIENT: 'pg'
      DB_HOST: postgres
      DB_PORT: ${LOCAL_POSTGRES_PORT}
      DB_DATABASE: ${LOCAL_POSTGRES_DATABASE}
      DB_USER: ${LOCAL_POSTGRES_USER}
      DB_PASSWORD: ${LOCAL_POSTGRES_PASSWORD}
      DB_SEARCH_PATH: 'omni'

      # Cache Settings
      CACHE_ENABLED: 'true'
      CACHE_STORE: 'redis'
      CACHE_REDIS: 'redis://cache:6379'

      # Storage
      STORAGE_LOCATIONS: 'ipfs'
      STORAGE_IPFS_DRIVER: 's3'
      STORAGE_IPFS_KEY: ${STORAGE_IPFS_KEY}
      STORAGE_IPFS_SECRET: ${STORAGE_IPFS_SECRET}
      STORAGE_IPFS_BUCKET: ${STORAGE_IPFS_BUCKET}
      STORAGE_IPFS_REGION: ${STORAGE_IPFS_REGION}
      STORAGE_IPFS_ENDPOINT: ${STORAGE_IPFS_ENDPOINT}

  graphql-engine:
    build:
      context: ./hasura
      args:
        BACKEND_HOST: host.docker.internal:3000/api
        AUTH_HOOK_PATH: hasuraAuthWebhook
        ACTION_BASE_PATH: actions
        REMOTE_SCHEMA_PATH: remote-schemas/graphql
        TRIGGERS_PATH: triggers
    depends_on:
      - 'postgres'
    ports:
      - ${LOCAL_HASURA_PORT:-8080}:${LOCAL_HASURA_PORT:-8080}
    networks:
      - directus
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${LOCAL_POSTGRES_USER}:${LOCAL_POSTGRES_PASSWORD}@postgres:${LOCAL_POSTGRES_PORT}/${LOCAL_POSTGRES_DATABASE}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${LOCAL_POSTGRES_USER}:${LOCAL_POSTGRES_PASSWORD}@postgres:${LOCAL_POSTGRES_PORT}/${LOCAL_POSTGRES_DATABASE}
      HEROKU_DATABASE_URL: postgres://${LOCAL_POSTGRES_USER}:${LOCAL_POSTGRES_PASSWORD}@postgres:${LOCAL_POSTGRES_PORT}/${LOCAL_POSTGRES_DATABASE}
      HASURA_GRAPHQL_ADMIN_SECRET: admin-secret
      HASURA_GRAPHQL_DEV_MODE: true
volumes:
  db_data:

networks:
  directus:
